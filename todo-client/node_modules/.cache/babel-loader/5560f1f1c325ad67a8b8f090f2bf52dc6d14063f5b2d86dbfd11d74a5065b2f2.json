{"ast":null,"code":"/**\r\n * This file contains all HTTP REST Methods\r\n */\nimport axios from 'axios';\n/**\r\n * Base URL\r\n * @type {string}\r\n */\nconst TODOS_API_BASE_URL = 'http://todo-backend:8080/todos/';\nclass TodosService {\n  /**\r\n   * returns a list of all Todos from a user\r\n   * @returns {Promise<axios.AxiosResponse<Todo[]>>}\r\n   */\n  async getTodosByUserId(userId) {\n    return await axios.get(TODOS_API_BASE_URL + '/user/' + userId);\n  }\n\n  /**\r\n   * get a single To-Do by ID\r\n   * @param objectId the mongoDB Object ID\r\n   * @returns {Promise<void>}\r\n   */\n  async getTodoById(objectId) {\n    return await axios.get(TODOS_API_BASE_URL + objectId);\n  }\n\n  /**\r\n   *\r\n   * @returns {Promise<axios.AxiosResponse<Todo>>}\r\n   * @param todo\r\n   */\n  async addTodo(todo) {\n    console.log(todo);\n    return await axios.post(TODOS_API_BASE_URL + 'add', {\n      userId: todo.userId,\n      description: todo.description,\n      priority: todo.priority,\n      // default is always false\n      completed: todo.completed\n    });\n  }\n\n  /**\r\n   * update an existing To-Do\r\n   * @param todo Object\r\n   * @param objectId The ID of the To-Do\r\n   * @returns {Promise<axios.AxiosResponse<Todo>>}\r\n   */\n  async updateTodo(todo, objectId) {\n    return await axios.post(TODOS_API_BASE_URL + 'update/' + objectId, {\n      userId: todo.userId,\n      description: todo.description,\n      priority: todo.priority,\n      completed: todo.completed\n    });\n  }\n\n  /**\r\n   * Deletes a To-do by its ID\r\n   * @param objectId\r\n   * @returns {Promise<axios.AxiosResponse<Todo>>}\r\n   */\n  async deleteTodoById(objectId) {\n    return await axios.delete(TODOS_API_BASE_URL + objectId);\n  }\n}\nconst todoService = new TodosService();\nexport default todoService;","map":{"version":3,"names":["axios","TODOS_API_BASE_URL","TodosService","getTodosByUserId","userId","get","getTodoById","objectId","addTodo","todo","console","log","post","description","priority","completed","updateTodo","deleteTodoById","delete","todoService"],"sources":["/home/raman/Downloads/MERN-Todo-App-main/todo-client/src/services/todosService.ts"],"sourcesContent":["/**\r\n * This file contains all HTTP REST Methods\r\n */\r\nimport axios from 'axios';\r\nimport {AxiosResponse} from 'axios';\r\nimport {Todo} from '../models/Todo';\r\n\r\n/**\r\n * Base URL\r\n * @type {string}\r\n */\r\nconst TODOS_API_BASE_URL = 'http://todo-backend:8080/todos/';\r\n\r\nclass TodosService {\r\n    /**\r\n     * returns a list of all Todos from a user\r\n     * @returns {Promise<axios.AxiosResponse<Todo[]>>}\r\n     */\r\n    async getTodosByUserId(userId: string): Promise<AxiosResponse<Todo[]>> {\r\n        return await axios.get(TODOS_API_BASE_URL + '/user/' + userId);\r\n    }\r\n\r\n    /**\r\n     * get a single To-Do by ID\r\n     * @param objectId the mongoDB Object ID\r\n     * @returns {Promise<void>}\r\n     */\r\n    async getTodoById(objectId: string): Promise<AxiosResponse<Todo>> {\r\n        return await axios.get(TODOS_API_BASE_URL + objectId);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @returns {Promise<axios.AxiosResponse<Todo>>}\r\n     * @param todo\r\n     */\r\n    async addTodo(todo: Todo): Promise<AxiosResponse<Todo>> {\r\n        console.log(todo);\r\n        return await axios.post(TODOS_API_BASE_URL + 'add',\r\n            {\r\n                userId: todo.userId,\r\n                description: todo.description,\r\n                priority: todo.priority,\r\n                // default is always false\r\n                completed: todo.completed\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * update an existing To-Do\r\n     * @param todo Object\r\n     * @param objectId The ID of the To-Do\r\n     * @returns {Promise<axios.AxiosResponse<Todo>>}\r\n     */\r\n    async updateTodo(todo: Todo, objectId: string): Promise<AxiosResponse<Todo>> {\r\n        return await axios.post(TODOS_API_BASE_URL + 'update/' + objectId,\r\n            {\r\n                userId: todo.userId,\r\n                description: todo.description,\r\n                priority: todo.priority,\r\n                completed: todo.completed,\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Deletes a To-do by its ID\r\n     * @param objectId\r\n     * @returns {Promise<axios.AxiosResponse<Todo>>}\r\n     */\r\n    async deleteTodoById(objectId: string): Promise<AxiosResponse<Todo>> {\r\n        return await axios.delete(TODOS_API_BASE_URL + objectId);\r\n    }\r\n}\r\n\r\nconst todoService = new TodosService();\r\nexport default todoService;"],"mappings":"AAAA;AACA;AACA;AACA,OAAOA,KAAK,MAAM,OAAO;AAIzB;AACA;AACA;AACA;AACA,MAAMC,kBAAkB,GAAG,iCAAiC;AAE5D,MAAMC,YAAY,CAAC;EACf;AACJ;AACA;AACA;EACI,MAAMC,gBAAgBA,CAACC,MAAc,EAAkC;IACnE,OAAO,MAAMJ,KAAK,CAACK,GAAG,CAACJ,kBAAkB,GAAG,QAAQ,GAAGG,MAAM,CAAC;EAClE;;EAEA;AACJ;AACA;AACA;AACA;EACI,MAAME,WAAWA,CAACC,QAAgB,EAAgC;IAC9D,OAAO,MAAMP,KAAK,CAACK,GAAG,CAACJ,kBAAkB,GAAGM,QAAQ,CAAC;EACzD;;EAEA;AACJ;AACA;AACA;AACA;EACI,MAAMC,OAAOA,CAACC,IAAU,EAAgC;IACpDC,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;IACjB,OAAO,MAAMT,KAAK,CAACY,IAAI,CAACX,kBAAkB,GAAG,KAAK,EAC9C;MACIG,MAAM,EAAEK,IAAI,CAACL,MAAM;MACnBS,WAAW,EAAEJ,IAAI,CAACI,WAAW;MAC7BC,QAAQ,EAAEL,IAAI,CAACK,QAAQ;MACvB;MACAC,SAAS,EAAEN,IAAI,CAACM;IACpB,CAAC,CACJ;EACL;;EAEA;AACJ;AACA;AACA;AACA;AACA;EACI,MAAMC,UAAUA,CAACP,IAAU,EAAEF,QAAgB,EAAgC;IACzE,OAAO,MAAMP,KAAK,CAACY,IAAI,CAACX,kBAAkB,GAAG,SAAS,GAAGM,QAAQ,EAC7D;MACIH,MAAM,EAAEK,IAAI,CAACL,MAAM;MACnBS,WAAW,EAAEJ,IAAI,CAACI,WAAW;MAC7BC,QAAQ,EAAEL,IAAI,CAACK,QAAQ;MACvBC,SAAS,EAAEN,IAAI,CAACM;IACpB,CAAC,CACJ;EACL;;EAEA;AACJ;AACA;AACA;AACA;EACI,MAAME,cAAcA,CAACV,QAAgB,EAAgC;IACjE,OAAO,MAAMP,KAAK,CAACkB,MAAM,CAACjB,kBAAkB,GAAGM,QAAQ,CAAC;EAC5D;AACJ;AAEA,MAAMY,WAAW,GAAG,IAAIjB,YAAY,EAAE;AACtC,eAAeiB,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}